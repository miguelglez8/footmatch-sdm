// Generated by view binder compiler. Do not edit!
package com.example.footmatch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.footmatch.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemEventoLocalBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView icono1;

  @NonNull
  public final ImageView icono2;

  @NonNull
  public final TextView minutoEvento;

  @NonNull
  public final TextView primerFactor;

  @NonNull
  public final TextView segundoFactor;

  private ItemEventoLocalBinding(@NonNull LinearLayout rootView, @NonNull ImageView icono1,
      @NonNull ImageView icono2, @NonNull TextView minutoEvento, @NonNull TextView primerFactor,
      @NonNull TextView segundoFactor) {
    this.rootView = rootView;
    this.icono1 = icono1;
    this.icono2 = icono2;
    this.minutoEvento = minutoEvento;
    this.primerFactor = primerFactor;
    this.segundoFactor = segundoFactor;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemEventoLocalBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemEventoLocalBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_evento_local, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemEventoLocalBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.icono1;
      ImageView icono1 = ViewBindings.findChildViewById(rootView, id);
      if (icono1 == null) {
        break missingId;
      }

      id = R.id.icono2;
      ImageView icono2 = ViewBindings.findChildViewById(rootView, id);
      if (icono2 == null) {
        break missingId;
      }

      id = R.id.minuto_evento;
      TextView minutoEvento = ViewBindings.findChildViewById(rootView, id);
      if (minutoEvento == null) {
        break missingId;
      }

      id = R.id.primer_factor;
      TextView primerFactor = ViewBindings.findChildViewById(rootView, id);
      if (primerFactor == null) {
        break missingId;
      }

      id = R.id.segundo_factor;
      TextView segundoFactor = ViewBindings.findChildViewById(rootView, id);
      if (segundoFactor == null) {
        break missingId;
      }

      return new ItemEventoLocalBinding((LinearLayout) rootView, icono1, icono2, minutoEvento,
          primerFactor, segundoFactor);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
